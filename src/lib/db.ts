import { Pool } from "pg";

// Tipagem para o cache global, que evita criar m√∫ltiplas conex√µes em desenvolvimento.
declare global {
  // eslint-disable-next-line no-var
  var pgPool: Pool | undefined;
}

let conn: Pool;

// A string de conex√£o √© lida das vari√°veis de ambiente.
// Em produ√ß√£o, ser√° a vari√°vel configurada no painel da Vercel/Firebase.
// Em desenvolvimento, ser√° a vari√°vel do arquivo .env.local.
const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  // Lan√ßa um erro se a DATABASE_URL n√£o estiver definida.
  // Isso garante que a aplica√ß√£o falhe rapidamente se a configura√ß√£o estiver incompleta.
  throw new Error("A vari√°vel de ambiente DATABASE_URL n√£o est√° definida.");
}

// Configura o SSL apenas para produ√ß√£o (necess√°rio para Neon), desabilitando em desenvolvimento.
const sslConfig = process.env.NODE_ENV === 'production' 
    ? { rejectUnauthorized: false } 
    : undefined;


// L√≥gica para evitar m√∫ltiplas conex√µes em ambiente de desenvolvimento (hot-reload).
if (process.env.NODE_ENV === "development") {
  // Se a inst√¢ncia global do pool ainda n√£o existe, cria uma nova.
  if (!global.pgPool) {
    console.log("üîπ Criando novo pool de conex√£o para desenvolvimento.");
    global.pgPool = new Pool({
      connectionString: connectionString,
      ssl: sslConfig,
    });
  }
  // Atribui a inst√¢ncia global (nova ou existente) √† conex√£o.
  conn = global.pgPool;
} else {
  // Em produ√ß√£o, sempre cria uma nova inst√¢ncia do pool.
  conn = new Pool({
    connectionString: connectionString,
    ssl: sslConfig,
  });
}

// Exporta a conex√£o para ser usada em outras partes da aplica√ß√£o.
export { conn };
