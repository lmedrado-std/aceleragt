import { Pool } from "pg";

// Tipagem para o cache global, que evita criar m√∫ltiplas conex√µes em desenvolvimento.
declare global {
  // eslint-disable-next-line no-var
  var pgPool: Pool | undefined;
}

let conn: Pool;

// A string de conex√£o √© lida das vari√°veis de ambiente.
// Em produ√ß√£o, ser√° a vari√°vel configurada no painel da Vercel/Firebase.
// Em desenvolvimento, ser√° a vari√°vel do arquivo .env.local.
const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  // Alerta o desenvolvedor se a vari√°vel n√£o estiver configurada.
  console.warn("‚ö†Ô∏è A vari√°vel de ambiente DATABASE_URL n√£o est√° definida. A conex√£o com o banco de dados n√£o ser√° estabelecida.");
}

// Previne m√∫ltiplas conex√µes em desenvolvimento durante o "hot-reload".
if (process.env.NODE_ENV === "development") {
  if (connectionString) {
    if (!global.pgPool) {
      console.log("üîπ Criando novo pool de conex√£o para desenvolvimento.");
      global.pgPool = new Pool({
        connectionString: connectionString,
        ssl: {
          rejectUnauthorized: false, // Necess√°rio para algumas configura√ß√µes do Neon
        },
      });
    }
    conn = global.pgPool;
  }
} else {
  // Em produ√ß√£o, cria uma √∫nica inst√¢ncia se a string de conex√£o existir.
  if (connectionString) {
    conn = new Pool({
      connectionString: connectionString,
      ssl: {
        rejectUnauthorized: false, // Necess√°rio para Neon
      },
    });
  }
}

// Exporta a conex√£o para ser usada em outras partes da aplica√ß√£o.
// Se a conex√£o n√£o foi estabelecida (por falta de DATABASE_URL), `conn` ser√° undefined.
// O c√≥digo que a utiliza dever√° tratar esse caso para evitar erros em tempo de execu√ß√£o.
export { conn };
